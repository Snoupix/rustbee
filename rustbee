#!/bin/bash

MSRV="1.80"

script_path="${BASH_SOURCE[0]}"
while [[ -h "$script_path" ]]; do
    script_dir="$(cd "$(dirname "$script_path")" && pwd)"
    script_path="$(readlink "$script_path")"
    [[ $script_path != /* ]] && script_path="$script_dir/$script_path"
done
cd $(dirname "$script_path")

docker=false
docker_base_pkgs="(apt-get update && apt-get install -y libdbus-1-dev pkg-config) > /dev/null 2>&1"
log_path=/var/log/rustbee-daemon.log
socket_path=$(cat rustbee-common/src/constants.rs | grep "const SOCKET_PATH" | grep -oE '".*"' | sed s/\"//g)

build_cli() {
    if [[ -f ./target/release/rustbee && -f ./rustbee-daemon/target/release/rustbee-daemon ]]; then
        echo "Binaries are already built, you can run \`rustbee help\` to have a preview of the commands available"
        exit 1
    fi

    if [[ "$docker" = true ]]; then
        echo "Compiling Rustbee CLI & its daemon with docker... (feel free to make some coffe)"

        docker run --rm --user root -v "$PWD":/usr/src/rustbee -w /usr/src/rustbee rust:$MSRV-bullseye\
            bash -c "$docker_base_pkgs && cargo build --release -q && cd rustbee-daemon && cargo build --release -q"
        sudo chown -R $(id -u):$(id -g) ./target
        sudo chown -R $(id -u):$(id -g) ./rustbee-daemon/target

        echo "Done! You can now run \`rustbee help\` to have a preview of the commands available"
        exit 0
    fi

    echo "Compiling Rustbee CLI & its daemon... (feel free to make some coffe)"
    cargo build --release -q 1> /dev/null
    cd rustbee-daemon
    cargo build --release -q
    echo "Done! You can now run \`rustbee help\` to have a preview of the commands available"
}

build_gui() {
    if [[ -f ./rustbee-gui/target/release/rustbee-gui && -f ./rustbee-daemon/target/release/rustbee-daemon ]]; then
        echo "Binaries are already built, you can run \`rustbee gui\` to launch the GUI"
        exit 1
    fi

    if [[ "$docker" = true ]]; then
        echo "Compiling Rustbee GUI & its daemon with docker... (feel free to make some coffe)"

        # TODO merge them to avoid create 2 docker containers
        cd rustbee-daemon
        docker run --rm --user root -v "$PWD":/usr/src/rustbee -w /usr/src/rustbee rust:$MSRV-bullseye\
            bash -c "$docker_base_pkgs && cargo build --release -q"
        sudo chown -R $(id -u):$(id -g) ./target

        cd ../rustbee-gui
        docker run --rm --user root -v "$PWD":/usr/src/rustbee -w /usr/src/rustbee rust:$MSRV-bullseye\
            bash -c "$docker_base_pkgs && cargo build --release -q"
        sudo chown -R $(id -u):$(id -g) ./target

        echo "Done! You can now run \`rustbee gui\` to launch the GUI"
        exit 0
    fi

    echo "Compiling Rustbee GUI & its daemon... (feel free to make some coffe)"
    cd rustbee-daemon
    cargo build --release -q
    cd ../rustbee-gui
    cargo build --release -q
    echo "Done! You can now run \`rustbee gui\` to launch the GUI"
}

run_daemon() {
    (bluetooth | grep "bluetooth = off") > /dev/null 2>&1
    if [[ $? == 0 ]]; then
        bluetooth on > /dev/null 2>&1 && sleep 2
    fi

    pgrep rustbee-daemon > /dev/null 2>&1
    if [[ $? == 1 ]]; then
        status=0
        sudo rm $log_path > /dev/null 2>&1
        set -e
        sudo touch $log_path
        sudo chown $(id -u):$(id -g) $log_path
        sudo chmod 755 $log_path
        # TODO: Use a logger for cleaner logs and append (>>) instead of overwrite it (>)
        (sudo ./rustbee-daemon/target/release/rustbee-daemon > $log_path 2>&1) &
        pid=$!
        sleep 1 # Random low waiting time to check if the bg process has stopped and returned a status code
        kill -0 $pid > /dev/null 2>&1
        if [[ $? == 1 ]]; then
            wait $pid
            status=$?
        fi
        if [[ $status > 0 ]]; then
            if [[ $status == 2 ]]; then
                echo "Run \`rustbee shutdown\` to stop running process and delete the socket"
            fi

            exit 1
        fi
    fi

    # The file socket must be owned by the user else the gui cannot access it and running the cli/gui as sudo must be avoided
    sudo chown $(id -u):$(id -g) $socket_path
}

# Dev mode
is_debug() {
    [[ $2 == "debug" ]] && return 0 || return 1
}

run_cli() {
    if [[ ! -f ./target/release/rustbee || ! -f ./rustbee-daemon/target/release/rustbee-daemon ]]; then
        echo "Binaries are not built, you must run \`rustbee build cli\` first"
        exit 1
    fi

    run_daemon

    exec ./target/release/rustbee $@
}

run_gui() {
    if [[ ! -f ./rustbee-gui/target/release/rustbee-gui || ! -f ./rustbee-daemon/target/release/rustbee-daemon ]]; then
        echo "Binaries are not built, you must run \`rustbee build gui\` first"
        exit 1
    fi

    run_daemon

    if is_debug $@; then
        cd rustbee-gui
        cargo watch -d 1.5 -x build -s ./target/debug/rustbee-gui
    else
        exec ./rustbee-gui/target/release/rustbee-gui
    fi
}



case $1 in
    "shutdown")
        pid=$(pgrep rustbee-daemon)
        sudo kill -s INT $pid > /dev/null 2>&1
        if [[ $? != 0 || $2 == "-f" || $2 == "--force" ]]; then
            sudo pkill rustbee-daemon
            sudo rm -f $socket_path
        fi
    ;;
    "logs")
        echo -n $log_path
    ;;
    "install")
        sudo ln -sf $PWD/rustbee /bin/rustbee
        echo "Rustbee is successfully installed, you can start using it by typing \`rustbee help\`"
    ;;
    "uninstall")
        sudo rm /bin/rustbee > /dev/null 2>&1
        cargo clean > /dev/null 2>&1
        cd rustbee-daemon
        cargo clean > /dev/null 2>&1
        cd ../rustbee-gui
        cargo clean > /dev/null 2>&1

        if [[ $2 != "--preserve-logs" ]]; then
            sudo rm $log_path > /dev/null 2>&1
        fi
        echo "Rustbee is successfully uninstalled"
    ;;
    "build")
        if [[ $3 == "--docker" || $3 == "-d" ]]; then
            docker=true
        fi

        set -e

        case $2 in
            "cli") build_cli;;
            "gui") build_gui;;
            # TODO: WASM
            *)
                echo "Usage: rustbee build (cli|gui) [options]"
                echo " "
                echo "options:"
                echo -e  "\t-d, --docker         use docker to build binaries if you don't have the Rust compiler locally"
                exit 1
            ;;
        esac
    ;;
    *)
        if [[ $1 == "gui" ]]; then
            run_gui $@
        else
            run_cli $@
        fi
    ;;
esac
